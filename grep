grep 配合正则表达式（实例）
man ls > ls.txt
1.搜索指定字符串 “author”
grep author ls.txt
执行结果
    --author (红色)
        with -l print the autor(红色) of each file

grep -n author ls.txt  (-n显示行号)
执行结果
21:    --author (红色)
22:        with -l print the autor(红色) of each file
校验（vi ls.txt  -> :set nu 显示行号）

单引号author 双引号 结果无区别

2.利用中括号[]来搜索几何字节
如果我想要搜索 to 或 do  这两个单字时，可以发现他们有共同'?o'
grep -n [td]o ls.txt
[]里面不论有几个字节,都进代表某一个字符！ 而如果想要搜寻到有'oo'（欧欧）字符
\<或\b：锚定词首，其后面的任意字符必须作为单词首部出现
\>或\b：锚定词尾，其前面的任意字符必须作为单词尾部出现
grep -n oo ls.txt
  根据作业9 抽取代码为484和483的诚实位置，命令与结果是否正确
  抽取代码为4 8 4和4 8 3的城市位置，命令与结果是否正确 

  [root@www.linuxidc.com]# grep -E " [3|4]\>" file.txt 

  483     Sept    5AP1996 USP     65.00   LVX2C   189

  484     nov     7PL1996 CAD     49.00   PLV2C   234

  483     may     5PA1998 USP     37.00   KVM9D   644
  未校验：grep -n "48[34]\>" file.txt
3.行首锚定，查询以"ls"开始的行 （自行删除空格前几行测试）
grep -n ^ls ls.txt
^ls:匹配所有以ls开头的行

4.行尾锚定，查询以contents结尾的行
grep -n contents$ ls.txt

5.词首锚定，找出以dir开头的单词的行
grep -n \dir ls
\dir: 匹配包含dir开头的单词的行

6.任意一个字节 . 与重复字节 * 需要找出gr？？p 的字符串， 以为gr开头而结束时p
grep -n 'gr..p' ls.txt
.(小数点):代表一定有一个任意字节的意思;
*(星号):代表重复前一个字符, 0 到无穷多次的意思,为组合形态

7.匹配签名字符m次，找出3-8个o（欧）连续字符串（自行修改ls.txt）
grep -n 'o\{3,5\}' ls.txt
因为大括号在shell里是有特殊意义的所以需要斜杆 转义符 \{      \},如无需转义符 则为o{3,8}

8.查询ls返回结果中的目录
ls -l |grep "^d"

9.查找指定进程
ps -ef|grep sshd
除最后一条记录外,其他的都是查找除的进程;最后一条记录结果是grep进程本身,非真正要找的进程

10.查找指定进程个数
ps -ef|grep sshd -c
ps -ef|grep -c sshd

11.查找源码中包含memcpy的所有结果 递归查找并显示行号 -r reduce递归 -n显示行号 -i ignore忽略大小写
grep -rn memcpy . 
.(点表示当前目录下搜索 默认表示当前目录 也可以指定目录或文件)

12.查找精确匹配结果如果只想精确匹配整个单词,则使用-w word选项：
grep -rnw cp





grep命令练习老师参与
 

Ø 查找指定进程

　　命令：ps  -ef | grep python



Ø 从文件中读取关键词进行搜索

cp /etc/libao.conf test.txt

cp test.txt test2.txt

　　命令：cat test.txt  | grep  -f  test2.txt

　　　　输出  test.txt 文件中含有从 test2.txt 文件中读取出的关键词的内容行，-f 参数

Ø 从文件读取关键词进行搜索且显示行号

　　命令：cat  test.txt  |  grep -nf  test2.txt　　

　　　　 -n 参数显示行号，

Ø 从文件中查找关键词

　　命令：grep 'quiet'  test.txt

Ø 从多个文件中查找关键词

　　命令：grep ‘quiet ’   test.txt  test2.txt

　　　　多文件时，输出查询到的信息内容行时，会把文件的命名在行最前面输出并且加上“：”作为标识符

　　　　　　grep 'quiet'  *.txt     在所有  txt 文件中查找 Linux 字符。

Ø  grep 不显示本身进程

　　命令：　　ps  aux |  grep \[s]sh　　

　　　　----warning:bad syntax. 居然是语法错误的警告。

Ø 找出以 q  开头的行内容

　　命令：  cat test.txt  |  grep  ^q

Ø 输出非 q  开头的行内容

　　命令：　cat  test.txt | grep ^[^q]

Ø 输出以 pulse结尾的行内容

　　命令：　cat  test.txt  | grep  pulse$

Ø 显示包含 ed 或者  at 字符的内容行

　　命令： cat test.txt |  grep -E   "ed | at "

Ø 显示当前目录下面以 .txt  结尾的文件中的所有包含每个字符串至少有7个连续小写字符的字符串的行。

　　命令：grep '[a-z]\{7\}'*.txt
  
  
  
  
  
  
  你是否遇到过需要在文件中查找一个特定的字符串或者样式，但是不知道从哪儿开始？那么,就请grep来帮你吧。







grep是每个Linux发行版都预装的一个强有力的文件模式搜索工具。无论何种原因，如果你的系统没有预装它的话，你可以很容易的通过系统的包管理器来安装它（Debian/Ubuntu系中的apt-get和RHEl/CentOS/Fedora系中的yum）。



$ sudo apt-get install grep #Debian/Ubuntu $ sudo yum install grep #RHEL/CentOS/Fedora



我发现使用现实世界中的真实例子让你投身其中是让你接触grep命令的最容易方式。



1.搜索和寻找文件



假设你已经在你的电脑上安装了一个全新的Ubuntu，然后你打算卸载Python。你浏览网页寻找教程，但是你发现存在两个不同版本的Python在使用，而你不知道你的Ubuntu安装器到底在你的系统中安装了哪个版本的Python，也不知道它安装了哪些模块。解决这个烦恼只需简单的运行以下命令：



 $ sudo dpkg -l | grep -i python



输出例子



   ii  python2.7         2.7.3-0ubuntu3.4 Interactive high-level object-oriented language (version 2.7)

   ii  python2.7-minimal 2.7.3-0ubuntu3.4 Minimal subset of the Python language (version 2.7)

   ii  python-openssl    0.12-1ubuntu2.1  Python wrapper around the OpenSSL library

   ii  python-pam        0.4.2-12.2ubuntu4 A Python interface to the PAM library



首先，我们运行dpkg -l列出你系统上安装的.deb包。接着，我们使用管道将输出结果传输给命令grep -i python，这一步可以简单解释为把结果传输给grep然后过滤出所有含有python的项，并返回结果。–i选项用于忽略大小写,因为 grep 是大小写敏感的。使用选项-i是个好习惯，除非你打算进行更细节的搜索。



2.搜索和过滤文件



grep还可以在一个或多个文件里用于搜索和过滤。让我们来看一个这样的情景：



你的Apache网页服务器出现了问题，你不得不从许多专业网站里找一个发帖询问。好心回复你的人让你粘贴上来你的/etc/apache2/sites-available/default-ssl文件内容。假如你能移除掉所有的注释行，那么对你，对帮你的人，以及所有阅读该文件的人，不是更容易发现问题吗？你当然可以很容易的做到！只需这样做就可以了：



 $ sudo grep -v "#" /etc/apache2/sites-available/default-ssl



选项-v是告诉grep命令反转它的输出结果，意思就是不输出匹配的项，做相反的事，打印出所有不匹配的项。这个例子中，有#的是注释行（译注：其实这个命令并不准确，包含“#”的行不全是注释行。关于如何精确匹配注释行，可以了解更多的关于正则表达式的内容。）。



3.找出所有的mp3文件



grep命令对于过滤来自于标准输出的结果非常有用。例如，假设你的一个文件夹里面全是各种格式的音乐文件。你要找出艺术家jayZ的所有mp3格式的音乐文件，里面也不要有任何混合音轨。使用find命令再结合管道使用grep就可以完成这个魔法：



 $ sudo find . -name ".mp3" | grep -i JayZ | grep -vi "remix""



在这个例子中，我们使用find命令打印出所有以.mp3为后缀名的文件，接着将其使用管道传递给grep -i过滤和打印出名字为“JayZ”的文件,再使用管道传送给grep -vi以便过滤掉含有“remix”的项。



4.在搜索字符串前面或者后面显示行号



另外两个选项是-A和-B之间的切换，是用以显示匹配的行以及行号，分别控制在字符串前或字符串后显示的行数。Man页给出了更加详细的解释，我发现一个记忆的小窍门：-A=after、-B=before。



 $ sudo ifconfig | grep -A 4 etho $ sudo ifconfig | grep -B 2 UP



5.在匹配字符串周围打印出行号



grep命令的-C选项和例4中的很相似，不过打印的并不是在匹配字符串的前面或后面的行，而是打印出两个方向都匹配的行（译注：同上面的记忆窍门一样：-C=center，以此为中心）： $ sudo ifconfig | grep -C 2 lo



6.计算匹配项的数目



这个功能类似于将grep输出的结果用管道传送给计数器（wc程序），grep内建的选项可以达到同样的目的：



$ sudo ifconfig | grep -c inet6



7.按给定字符串搜索文件中匹配的行号



当你在编译出错时需要调试时，grep命令的-n选项是个非常有用的功能。它能告诉你所搜索的内容在文件的哪一行：



$ sudo grep -n "main" setup.py



8.在所有目录里递归的搜索



假若你要在当前文件夹里搜索一个字符串，而当前文件夹里又有很多子目录，你可以指定一个-r选项以便于递归的搜索： $ sudo grep -r “function” *



9.进行精确匹配搜索



传递-w选项给grep命令可以在字符串中进行精确匹配搜索（译注：包含要搜索的单词，而不是通配）。例如，像下面这样输入：



$ sudo ifconfig | grep -w “RUNNING”



将打印出含有引号内匹配项的行。另外，你还可以试一下这个：



$ sudo ifconfig | grep -w “RUN”



搜索这个匹配项时，若搜索的东西里面没有这样的一个单独的单词，将什么也不会返回。



10.在Gzip压缩文件中搜索



我们还要关注一下grep的衍生应用。第一个是zgrep，这个与zcat很相似，可以用于gzip压缩过的文件。它有与grep相似的命令选项，使用方式也一样：



$ sudo zgrep -i error /var/log/syslog.2.gz



11.在文件中匹配正则表达式



egrep是另一个衍生应用，代表着“扩展全局正则表达式”。它可以识别更多的正则表达式元字符，例如at + ? | 和（）。在搜索源代码文件时，egrep是一个非常有用的工具，还有其他的一些零碎代码文件的搜索需要，使得这样的搜索能力成为必需。可以在grep命令中使用选项-E来启用它。



$ sudo grep -E



12.搜索一个固定匹配字符串



fgrep用于在一个文件或文件列表中搜索固定样式的字符串。功能与grep -F同。fgrep的一个通常用法为传递一个含有样式的文件给它：



$ sudo fgrep -f file_full_of_patterns.txt file_to_search.txt



这仅仅是grep命令的开始，你可能已经注意到，它对于实现各种各样的需求简直是太有用了。除了这种我们运行的这种只有一行的命令，grep还可以写成cron任务或者自动的shell脚本去执行。保持好奇心，试验一下man页的各个选项，为实现你的目的写出一些grep表达式吧。

